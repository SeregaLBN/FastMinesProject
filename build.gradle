// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {

    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.4.1'


        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
        jcenter()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
/*
apply plugin: 'java'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

defaultTasks 'clean', 'build'

subprojects {
    apply plugin: 'java'

    compileJava.options.encoding = 'UTF-8'

    group = 'fmg' // FastMinesGame
    defaultTasks 'clean', 'build'

    jar {
        manifest {
            attributes 'Vendor': 'SeregaLBN',
                       'Build-Date': new Date().format("yyyy-MM-dd'T 'HH:mm:ss.SSSZZ")
        }
    }

    repositories {
        mavenCentral()
        //jcenter()
    }

    task uberjar(type: Jar) {
        from files(sourceSets.main.output.classesDir)
        from configurations.runtime.asFileTree.files.collect { zipTree(it) }

        // manifest {
        //     attributes 'Main-Class': 'test.tree.App'
        // }
    }

}
*/


def printLogo() {
    try {
        def fmgCanonicalLogo = './res/Logo/Logo_2020x2020.png'
        def img = javax.imageio.ImageIO.read(new File(new URL(new File(rootProject.projectDir.absolutePath).toURI().toURL(), fmgCanonicalLogo).toURI()))
        def r = java.util.concurrent.ThreadLocalRandom.current()

        // scaleToConsole
        def inImg = img
        int inW = inImg.getWidth()
        int inH = inImg.getHeight()
        int maxIn = Math.max(inW, inH)
        int maxOut = 35 + r.nextInt(25)
        int outW = inW*maxOut/maxIn
        int outH = (int)(0.6 * inH*maxOut/maxIn) // fix console char size
        def outImg = new java.awt.image.BufferedImage(outW, outH, java.awt.image.BufferedImage.TYPE_USHORT_GRAY)
        def g = outImg.createGraphics()
        g.setColor(java.awt.Color.WHITE)
        g.fillRect(0, 0, outW, outH)
        g.drawImage(inImg, 0, 0, outW, outH, null)
        outImg.flush()
        g.dispose();
        img = outImg

        // printImage
        int w = img.getWidth()
        int h = img.getHeight()
        for (int row = 0; row < h; row++) {
            StringBuilder line = new StringBuilder()
            for (int col = 0; col < w; col++)
                line.append((img.getRGB(col, row) == -1) ? " " : "â–ˆ")
           
            int[] colorCodes = [31,32,33,34,35,36];
            println(String.format("%c[%dm", 0x1B, colorCodes[r.nextInt(colorCodes.length)])) // http://www.termsys.demon.co.uk/vtansi.htm
            println(line.toString())
        }
        println(String.format("%c[%dm", 0x1B, 0)) // Reset all attributes

    } catch (Exception ex) {
        System.err.println("printLogo failed: " + ex.getMessage())
        //ex.printStackTrace(System.err)
    }
}
printLogo();

// ================ GIT part begin ==========================
def getGitRepoPath() {
    new File(new URL(new File(rootProject.projectDir.absolutePath).toURI().toURL(), './.git').toURI()).absolutePath
}

def gitBranchName() {
    def branchInfo = ''
    try {
        def proc = ('git --git-dir=' + gitRepoPath + ' rev-parse --abbrev-ref HEAD').execute()
        proc.in.eachLine { line -> branchInfo = line }
        proc.err.eachLine { line -> println line }
        proc.waitFor()
    } catch(ex) {
        println '--------------------------------------'
        println 'error execution GIT: ' + ex
    }
    branchInfo
}

def gitLastLogOneLine(prettyPlaceholder) { // prettyPlaceholder - @see https://git-scm.com/docs/pretty-formats
    def res = ''
    try {
        def proc = ('git --git-dir=' + gitRepoPath + ' log -1 --pretty=%' + prettyPlaceholder).execute()
        proc.in.eachLine { line ->
            line = line.trim()
            if (line.isEmpty())
                return
            res += res.isEmpty() ? line : ('; ' + line)
        }
        proc.err.eachLine { line -> println line }
        proc.waitFor()
    } catch(ex) {
        println '--------------------------------------'
        println 'error execution GIT: ' + ex
    }
    res
}

def gitLastCommitInfoOneLine() {
    return 'Commit: '  + gitLastLogOneLine('H')  + // commit hash
         '; Author: '  + gitLastLogOneLine('an') + // author name
                  ' '  + gitLastLogOneLine('ae') + // author email
         '; Date: '    + gitLastLogOneLine('ai') + // author date
         '; Comment: ' + gitLastLogOneLine('B')    // raw body (unwrapped subject and body)
}

def gitLastCommitInfo() {
    def res = ''
    def proc = ('git --git-dir=' + gitRepoPath +' log -1').execute()
    proc.in.eachLine { line ->
        res += res.isEmpty() ? line : ('\n' + line)
    }
    proc.err.eachLine { line -> println line }
    proc.waitFor()
    res
}


println '================== GIT info ==================='
println gitBranchName()
println gitLastCommitInfo()
println '==============================================='

// ================ GIT part end ==========================
