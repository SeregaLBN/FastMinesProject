package ua.ksn.fmg.view.swing.res.img;import java.awt.Component;import java.awt.Graphics;import javax.swing.Icon;import ua.ksn.geom.PointDouble;import ua.ksn.swing.geom.Cast;/** main logos image */public class Logo implements Icon {	public static final int DefaultWidht = 200;	public static final int DefaultHeight = 200;	public double _zoomX;	public double _zoomY;	public int _margin;	public Logo() {		_zoomX = 1;		_zoomY = 1;		_margin = 3;	}	public final ua.ksn.Color[] Palette = {			new ua.ksn.Color(0xFFFF0000), new ua.ksn.Color(0xFFFFD800), new ua.ksn.Color(0xFF4CFF00), new ua.ksn.Color(0xFF00FF90),			new ua.ksn.Color(0xFF0094FF), new ua.ksn.Color(0xFF4800FF), new ua.ksn.Color(0xFFB200FF), new ua.ksn.Color(0xFFFF006E) };	public static double CalcZoom(int desiredLogoWidhtHeight, int margin) {		// desiredLogoWidhtHeight = DefaultHeight*zoom+2*margin		return (desiredLogoWidhtHeight - 2.0 * margin) / DefaultHeight;	}	public void MixLoopColor(int loop) {		ua.ksn.Color[] copy = Palette.clone();		for (int i = 0; i < Palette.length; i++)			Palette[i] = copy[(i + loop) % 8];	}	public int getIconWidth() {		return (int) (DefaultWidht * _zoomX + 2 * _margin);	}	public int getIconHeight() {		return (int) (DefaultHeight * _zoomY + 2 * _margin);	}	public void paintIcon(Component c, Graphics g, int x, int y) {        // draw star		PointDouble[] rays = new PointDouble[] { // owner rays points           new PointDouble(getMargin()+100.0000*getZoomX(), getMargin()+200.0000*getZoomY()),           new PointDouble(getMargin()+170.7107*getZoomX(), getMargin()+ 29.2893*getZoomY()),           new PointDouble(getMargin()+  0.0000*getZoomX(), getMargin()+100.0000*getZoomY()),           new PointDouble(getMargin()+170.7107*getZoomX(), getMargin()+170.7107*getZoomY()),           new PointDouble(getMargin()+100.0000*getZoomX(), getMargin()+  0.0000*getZoomY()),           new PointDouble(getMargin()+ 29.2893*getZoomX(), getMargin()+170.7107*getZoomY()),           new PointDouble(getMargin()+200.0000*getZoomX(), getMargin()+100.0000*getZoomY()),           new PointDouble(getMargin()+ 29.2893*getZoomX(), getMargin()+ 29.2893*getZoomY())};		PointDouble[] inn = new PointDouble[] { // inner octahedron           new PointDouble(getMargin()+100.0346*getZoomX(), getMargin()+141.4070*getZoomY()),           new PointDouble(getMargin()+129.3408*getZoomX(), getMargin()+ 70.7320*getZoomY()),           new PointDouble(getMargin()+ 58.5800*getZoomX(), getMargin()+100.0000*getZoomY()),           new PointDouble(getMargin()+129.2500*getZoomX(), getMargin()+129.2500*getZoomY()),           new PointDouble(getMargin()+ 99.9011*getZoomX(), getMargin()+ 58.5377*getZoomY()),           new PointDouble(getMargin()+ 70.7233*getZoomX(), getMargin()+129.3198*getZoomY()),           new PointDouble(getMargin()+141.4167*getZoomX(), getMargin()+100.0000*getZoomY()),           new PointDouble(getMargin()+ 70.7500*getZoomX(), getMargin()+ 70.7500*getZoomY())};		PointDouble[] oct = new PointDouble[] { // central octahedron           new PointDouble(getMargin()+120.7053*getZoomX(), getMargin()+149.9897*getZoomY()),           new PointDouble(getMargin()+120.7269*getZoomX(), getMargin()+ 50.0007*getZoomY()),           new PointDouble(getMargin()+ 50.0034*getZoomX(), getMargin()+120.7137*getZoomY()),           new PointDouble(getMargin()+150.0000*getZoomX(), getMargin()+120.6950*getZoomY()),           new PointDouble(getMargin()+ 79.3120*getZoomX(), getMargin()+ 50.0007*getZoomY()),           new PointDouble(getMargin()+ 79.2624*getZoomX(), getMargin()+149.9727*getZoomY()),           new PointDouble(getMargin()+150.0000*getZoomX(), getMargin()+ 79.2737*getZoomY()),           new PointDouble(getMargin()+ 50.0034*getZoomX(), getMargin()+ 79.3093*getZoomY())};        // paint owner rays        for (int i=0; i<8; i++) {        	g.setColor(Cast.toColor(Palette[i].Bedraggle()));        	g.fillPolygon(        			new int [] {(int) rays[i].x,        						(int) oct[i].x,        						(int) inn[i].x,        						(int) oct[(i+5)%8].x},					new int [] {(int) rays[i].y,        						(int) oct[i].y,        						(int) inn[i].y,        						(int) oct[(i+5)%8].y},					4);        }        // paint star perimeter        for (int i=0; i<8; i++) {        	PointDouble p1 = rays[(i + 7)%8];        	PointDouble p2 = rays[i];        	g.setColor(Cast.toColor(Palette[i]));        	g.drawLine((int)p1.x, (int)p1.y, (int)p2.x, (int)p2.y);        }        // paint inner gradient triangles        for (int i=0; i<8; i++) {        	g.setColor(Cast.toColor(((i & 1) == 0)        			? Palette[(i + 6)%8].Attenuate()					: Palette[(i + 6)%8]));           g.fillPolygon(        		   new int [] {        				   (int) inn[(i + 0)%8].x,        				   (int) inn[(i + 3)%8].x,        				   getIconWidth()/2},				   new int [] {						   (int) inn[(i + 0)%8].y,						   (int) inn[(i + 3)%8].y,						   getIconHeight()/2},				   3);        }	}	public double getZoomX() {		return _zoomX;	}	public void setZoomX(double zoomX) {		this._zoomX = zoomX;	}	public double getZoomY() {		return _zoomY;	}	public void setZoomY(double zoomY) {		this._zoomY = zoomY;	}	public int getMargin() {		return _margin;	}	public void setMargin(int margin) {		this._margin = margin;	}}